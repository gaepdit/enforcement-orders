// <auto-generated />
using System;
using Enfo.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Enfo.Infrastructure.Migrations
{
    [DbContext(typeof(EnfoDbContext))]
    [Migration("20250428202237_AddPerformanceIndexes")]
    partial class AddPerformanceIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Enfo.Domain.EnforcementOrders.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EnforcementOrderId")
                        .HasColumnType("int");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(245)
                        .HasColumnType("nvarchar(245)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnforcementOrderId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Enfo.Domain.EnforcementOrders.Entities.EnforcementOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommentContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CommentPeriodClosesDate")
                        .HasColumnType("Date");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExecutedDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("ExecutedOrderPostedDate")
                        .HasColumnType("Date");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HearingCommentPeriodClosesDate")
                        .HasColumnType("Date");

                    b.Property<int?>("HearingContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HearingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HearingLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExecutedOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHearingScheduled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProposedOrder")
                        .HasColumnType("bit");

                    b.Property<int>("LegalAuthorityId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ProposedOrderPostedDate")
                        .HasColumnType("Date");

                    b.Property<int>("PublicationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SettlementAmount")
                        .HasColumnType("money");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentContactId");

                    b.HasIndex("HearingContactId");

                    b.HasIndex("LegalAuthorityId");

                    b.HasIndex(new[] { "Deleted", "LegalAuthorityId", "PublicationStatus" }, "missing_index_1099_1098");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted", "LegalAuthorityId", "PublicationStatus" }, "missing_index_1099_1098"), new[] { "ExecutedDate", "ExecutedOrderPostedDate", "IsExecutedOrder", "IsProposedOrder", "ProposedOrderPostedDate" });

                    b.HasIndex(new[] { "Deleted", "LegalAuthorityId", "PublicationStatus" }, "missing_index_1102_1101");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted", "LegalAuthorityId", "PublicationStatus" }, "missing_index_1102_1101"), new[] { "ExecutedDate", "ExecutedOrderPostedDate", "FacilityName", "IsExecutedOrder", "IsProposedOrder", "ProposedOrderPostedDate" });

                    b.HasIndex(new[] { "Deleted", "PublicationStatus", "County" }, "missing_index_1176_1175");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted", "PublicationStatus", "County" }, "missing_index_1176_1175"), new[] { "ExecutedDate", "ExecutedOrderPostedDate", "IsExecutedOrder", "IsProposedOrder", "ProposedOrderPostedDate" });

                    b.HasIndex(new[] { "Deleted", "PublicationStatus", "County" }, "missing_index_1271_1270");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted", "PublicationStatus", "County" }, "missing_index_1271_1270"), new[] { "ExecutedOrderPostedDate", "IsExecutedOrder", "IsProposedOrder", "ProposedOrderPostedDate" });

                    b.HasIndex(new[] { "Deleted", "OrderNumber" }, "missing_index_345_344");

                    b.HasIndex(new[] { "Deleted" }, "missing_index_561_560");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted" }, "missing_index_561_560"), new[] { "OrderNumber" });

                    b.HasIndex(new[] { "Deleted", "OrderNumber", "Id" }, "missing_index_617_616");

                    b.HasIndex(new[] { "Deleted", "PublicationStatus" }, "missing_index_699_698");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted", "PublicationStatus" }, "missing_index_699_698"), new[] { "ExecutedOrderPostedDate", "IsExecutedOrder", "IsProposedOrder", "OrderNumber", "ProposedOrderPostedDate" });

                    b.HasIndex(new[] { "Deleted", "LegalAuthorityId", "PublicationStatus" }, "missing_index_737_736");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted", "LegalAuthorityId", "PublicationStatus" }, "missing_index_737_736"), new[] { "ExecutedOrderPostedDate", "IsExecutedOrder", "IsProposedOrder", "ProposedOrderPostedDate" });

                    b.HasIndex(new[] { "Deleted", "PublicationStatus" }, "missing_index_741_740");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted", "PublicationStatus" }, "missing_index_741_740"), new[] { "ExecutedOrderPostedDate", "IsExecutedOrder", "IsProposedOrder", "ProposedOrderPostedDate" });

                    b.HasIndex(new[] { "Deleted", "LegalAuthorityId", "PublicationStatus", "County" }, "missing_index_898_897");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deleted", "LegalAuthorityId", "PublicationStatus", "County" }, "missing_index_898_897"), new[] { "ExecutedOrderPostedDate", "IsExecutedOrder", "IsProposedOrder", "ProposedOrderPostedDate" });

                    b.ToTable("EnforcementOrders");
                });

            modelBuilder.Entity("Enfo.Domain.EpdContacts.Entities.EpdContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EpdContacts");
                });

            modelBuilder.Entity("Enfo.Domain.LegalAuthorities.Entities.LegalAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LegalAuthorities");
                });

            modelBuilder.Entity("Enfo.Domain.Users.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GivenName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("MostRecentLogin")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ObjectId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ProfileUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("Enfo.Domain.EnforcementOrders.Entities.Attachment", b =>
                {
                    b.HasOne("Enfo.Domain.EnforcementOrders.Entities.EnforcementOrder", "EnforcementOrder")
                        .WithMany("Attachments")
                        .HasForeignKey("EnforcementOrderId");

                    b.Navigation("EnforcementOrder");
                });

            modelBuilder.Entity("Enfo.Domain.EnforcementOrders.Entities.EnforcementOrder", b =>
                {
                    b.HasOne("Enfo.Domain.EpdContacts.Entities.EpdContact", "CommentContact")
                        .WithMany()
                        .HasForeignKey("CommentContactId");

                    b.HasOne("Enfo.Domain.EpdContacts.Entities.EpdContact", "HearingContact")
                        .WithMany()
                        .HasForeignKey("HearingContactId");

                    b.HasOne("Enfo.Domain.LegalAuthorities.Entities.LegalAuthority", "LegalAuthority")
                        .WithMany()
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentContact");

                    b.Navigation("HearingContact");

                    b.Navigation("LegalAuthority");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Enfo.Domain.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Enfo.Domain.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enfo.Domain.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Enfo.Domain.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enfo.Domain.EnforcementOrders.Entities.EnforcementOrder", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
